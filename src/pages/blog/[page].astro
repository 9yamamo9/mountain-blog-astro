---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'
import { getCollection } from 'astro:content'
import ContentTag from '../../components/ContentTag.astro'
import Footer from '../../components/Footer.astro'
import BaseHead from '../../components/BaseHead.astro'
import FormattedDate from '../../components/FormattedDate.astro'
import Header from '../../components/Header.astro'
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts'
import Pagination from '../../components/Pagination.astro'
import PostList from '../../components/PostList.astro'

export async function getStaticPaths({ paginate }: any) {
	const posts = (await getCollection('blog'))
		.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
		.filter((post) => !post.data.editing)

	const images = import.meta.glob<{ default: ImageMetadata }>(`/src/content/assets/hero-images/*.{jpeg,jpg,png,gif}`)
	posts.map((post) => {
		const heroImagePath = post.data.heroImage as string
		if (!images[heroImagePath]) throw new Error(`"${heroImagePath}" does not exist in glob: "src/assets/hero-images/*.{jpeg,jpg,png,gif}"`)
	})

	const postPages = posts.map((post) => {
		return { post: post, imagePath: images[post.data.heroImage as string]() }
	})

	return paginate(postPages, { pageSize: 10 })
}

type Page = {
	data: any[]
	start: number
	end: number
	total: number
	currentPage: number
	size: number
	lastPage: number
	url: {
		current: string
		prev: string | undefined
		next: string | undefined;
	}
}

interface Props {
	page: Page
}

const { page } = Astro.props
---

<!doctype html>
<html lang="ja">
<head>
	<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
</head>

<body>
<Header />
<main class="w-[960px] m-auto px-2 py-4 max-lg:w-full max-md:w-full">
	<PostList posts={page.data} />
	{page.url && (
		<div class="flex justify-center mt-4">
			<Pagination url={page.url} />
		</div>
	)}
</main>
<Footer />
</body>
</html>